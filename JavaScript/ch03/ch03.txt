-- <연산자>

*산술 연산자
수학 계산을 할 때 사용하는 연산자
- 증감연산자 : (++)1 증가  (--) 1 감소  -> 단항 연산자
 
*할당 연산자(대입 연산자)
오른쪽 실행결과를 왼쪽 변수에 할당
- (+=)(-=)(*=)(/=)(%=)

*연결 연산자
- 산술 연산자의 더하기(+)를 연결 연산자로 사용
- 문자열과 문자열을 연결하는 연산자
user = prompt("이름을 입력하세요.")
alert(user + "님, 안녕하세요?")

*비교 연산자
- 피 연산자 2개의 값을 비교해서  true나 false로 결과값 반환
- 비교 연산자는 조건을 확인할 때 자주 사용하는 연산자
- (==) ,(!=) 연산자는 피연산자의 자료형을 자동으로 변환해서 비교한다
- (===),(!==) 연산자는 피연산자의 자료형까지 정확하게 맞는지 비교한다
- 피연산자가 문자열이면 문자들의 아스키 값을 비교한다.

*논리연산자 boolean
- true,false 처리 연산자
- 조건을 처리할때 사용하는 연산자



--<조건문>
if(조건) {
	조건이 true일때 실행할 명령
}

*if ... else 문
if(조건){
	조건 결과값이 true일 때 실행할 명령
}else{
	조건 결과값이 false일 때 실행할 명령
}


*thuthy 값, falsy값
-프롬프트 창에서 값을 입력하지 않고 확인을 누른 경우도 체크하려면 ,
 값이 입력되었는지를 체크할 때 truthy 값 사용 가능하다.

let input = prompt("이름을 입력하세요.")
if(input){ // input에 값이 들어있다면 truthy
alert(`${input}님, 어서오세요.`);
}else{
alert("이름을 입력하지 않았습니다.")
}


*조건 연산자
- 조건이 하나이고 실행할 명령도 하나일 때 조건문을 간단하게 처리하는 연산자
- (조건)? 명령1 : 명령2
small = (num1 <num2)? num1 : num2;
=> true면 num1 , false면 num2


*switch문
처리할 명령이 많을 경우 switch 문이 편리하다.

switch 키워드 오른쪽에 조건을 확인할 변수 지정
조건값은 case문 다음에 지정
조건값에 맞을 때 실행할 명령은 콜론(:) 다음에 나열
둘 이상의 명령이라면 { } 사용
조건에 맞는 명령을 실행한 후에는 break문을 써서switch문을 완전히 빠져나옴
case의 값과 일치하는게 없을 경우 default 문 실행
 default 문에는 break 문이 없음


*두가지 이상의 조건 체크하기
- 두 개 이상의 조건을 체크해야 할 경우에는 논리연산자를 이용한 조건식 만듦
OR 연산자(||) : 두 개의 피연산자 중 하나라도 true가 있으면 결괏값은 true가 된다.
AND 연산자(&&) : 두 개의 피연산자 중 false가 하나라도 있으면 결괏값은 false가 된다.
NOT 연산자(!) : 피연산자의 값과 정반대의 값



--<반복문>
반복문은 같은 동작을 여러 번 실행하기 위해 사용하는 문이다. 
반복문을 사용하면 불필요하게 여러 명령들을 늘어놓지 않아도 명령을 반복 실행할 수 있다.
그만큼 소스도 깔끔해지고 소스가 짧아지는만큼 실행도 빨라진다.


*for문
자바스크립트에서 가장 많이 사용하는 반복문
조건값이 일정하게 커지면서 명령을 반복 실행할 때 편리하다.
for문에서는 몇 번 반복했는지 기록하기 위해 카운터를 사용하고 for문의 첫 번째 항에서 카운터 변수를 지정한다.
for(초기값; 조건; 증가식){...}


*forEach문
배열의 크기(length)가 정해져 있지 않을 경우에 사용한다.
배열명.forEach(콜백 함수){...}


*for...in문 사용해서 객체 값 가져오기
객체에서 사용할 수 있는 반복문.
for…in문은 반복해서 객체의 키를 가져온다.
각 키의 값을 알고 싶다면 가져온 키를 사용해서 객체에 접근한다.
배열도 객체이기 때문에 배열에서도 for…in문을 사용할 수 있다.
for (변수 in 객체) { ... }


*for...of문 사용해서 반복 가능 객체 값 가져오기
문자열이나 배열처럼 그 안의 값이 순서대로 나열되어 있는 객체를 이터러블(iterable) 객체라고 함.
이터러블 객체에서는 for…of 문을 사용할 수 있다.
for (변수 of 객체) { ... }


*break문
반복문은 주어진 조건에 따라 문장을 반복하기 때문에 종료 조건이 돼야 반복이 끝남.
종료 조건이 되기 전에 반복문을 빠져나와야 한다면?  break문 사용
(switch문에서도 case에 맞는 값이 있을 경우 명령 실행 후 break문을 사용해 switch문 빠져나옴) 


*continue문
특정 조건이 됐을 때 실행하던 반복 문장을 더 이상 실행하지 않고 반복문의 맨 앞으로 되돌아감
 반복 과정을 한 차례 건너뛰게 됨.

