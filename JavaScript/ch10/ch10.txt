ch10. 문자열과 배열 

--<문자열에 접근하기>
* 원시 유형(primitive type) 에서 메서드 사용하기
- 자료형 중 단순히 값만 가지고 있을 때 -> 원시 유형
- 원시 유형에서도 프로퍼티와 메서드를 사용할 수 있다.
str= "hello"
str.length

=> 숫자형과 논리형, 문자열 유형은 별도로 객체가 만들어져 있다.
Number, Boolean, String 객체 <- 래퍼 객체라고 부름 => 오토박싱

*오토박싱?
number나 boolean, string 같은 원시 유형에서 프로퍼티나 메서드를 사용하면 일시적으로 원시 유형을 해당 객체로 변환한다. 
프로퍼티나 메서드의 사용이 끝나면 해당 객체는 메모리에서 사라진다. 
필요할 때에만 임시로 객체로 바꿔 사용하고 사용이 끝나면 다시 원시 유형으로 되돌아오는데, 이것을 오토박싱이라고 한다.

 
*문자열의 길이 - length
 - 문자열의 길이를 찾을 때에는 length 프로퍼티 사용
 문자열.length

let str = "good morning!"
str.length // 13

*특정 위치의 문자에 접근하기 - charAt()
1) 대괄호 사용
2) charAt() 메서드 사용

str = "good morning!"
str.charAt(3) //"d"
str[3] //'d"



*부분 문자열의 위치 찾기 - indexOf()
- 두개 이상의 단어로 구성된 문자열에는 공백으로 구분되는 여러 개의 부분 문자열이 있을 수 있다.
indexOf()메서드는 괄호 안읨 문자열이 나타난 위치를 알려준다. 찾는 문자열이 없으면 -1을 반환한다.

indexOf(문자열)
indexOf(문자열, 위치)

ex) str1라는 문자열에서 부문 문자열 위치 찾기
str1 = "good morning, everyone, Beautuful morning."
str1.indexOf("morning") //5
str1.indexOf("evening") //-1
first = str1.indexOf("morning") //5
str1.indexOf("morning", first+1) // 두번째 morning의 위치


*특정 문자(열)로 시작하는 지 확인 - startsWith(0
- 문자열이 특정 문자나 문자열로 시작하는 지 확인
- 문자나 문자열에서 영문자의 대소문자를 구별하므로 주의해야한다.

str2 = "Hello, everyone." 
str2.startsWith("Hello")   // true
str2.startsWith("hello")   // false
str2.startsWith("He")      // true
str2.startsWith("Hello, ev")   // true




*특정 문자(열)로 끝나는지 확인 – endsWith()
-문자열이 특정 문자나 문자열로 끝나는지 확인
-문자나 문자열에서 영문자의 대소문자를 구별하므로 주의해야 한다. 

str2 = "Hello, everyone." 
str2.endsWith("everyone.")    // true
str2.endsWith ("Everyone.")   // false
str2.endsWith ("one.")        // true
str2.endsWith ("lo, everyone")   // false

endsWith() 메서드를 사용할 때 문자열과 함께 길이를 지정할 수 있다
str2 = "Hello, everyone." 
str2.endsWith("one", 15)   // true 
str2.endsWith("lo", 5)     // true
=> 문자열 길이까지 안에 해당 요소가있나?



*특정 문자(열)이 있는지 확인 - includes()
문자열에 특정 문자나 문자열이 있는지 확인. 대소문자 구별

// str2 = "Hello, everyone."
str2.includes("every")   // true



*문자열에서 공백 제거하기 - trim()
- 문자열에서 공백이란, 스페이스바를 눌러 입력한 공백, tab을 눌러 입력한 탭, 줄을 바꾸기 위해 사용한 이스케이프 문자
- 문자열을 연산에 사용하려면 불필요한 공백을 제거하는 것이 좋다.

문자열.trim() - 앞뒤 공백 제거
문자열.trimStart() - 앞쪽 공백 제거
문자열.trimEnd() - 문자열의 뒤쪽 공백 제거 

str3 = " ab cd ef "
str3.trim() //"ab cd ef"
str3.trimStart() // "ab cd ef "
str3.trimEnd() // " ab cd ef"


*문자열의 대소문자 바꾸기 - toUpperCase(), toLowerCase()
- 영문자 문자열의 경우에는 문자열을 모두 대문자로, 또는 모두 소문자로 바꿀 수 있다.
문자열.toUpperCase() // 대문자로 변환
문자열.toLowerCase() // 소문자로 변환


*문자열의 부분 문자열 추출하기   - subString()
- 시작 위치부터 끝 위치 직전까지 추출해서 반환한다.
- 끝 위치를 지정하지 않으면 시작 위치부터 문자열 끝까지 추출해서 반환한다.

str4 = "good morning"
str4.subString(5)  //morning

str4 = "Good morning.“  에서 Good 부분만 추출하려면?
첫번째 글자(인덱스 0)부터 4번째까지 글자(인덱스 3)까지 추출해야 함
str4.substring(0, 4)

 

*문자열의 부분 문자열 추출하기 - slice()
시작위치부터 끝위치 직전까지 추출해서 반환한다.
끝 위치를 지정하지 않으면 시작 위치부터 문자열 끝까지 추출해서 반환한다.

문자열.slice(시작 위치)
문자열.slice(시작 위치, 끝 위치)

slice() 메서드는 음수를 사용해 위치를 지정할 수 있다.
음수로 지정하면 문자열의 끝에서부터 위치를 찾기 때문에, 문자열을 뒤에서부터 자를 때 편리하다.

// str4 = "Good morning."
str4.slice(-5, 12)  // “ning”


*구분자를 사용해 문자 쪼개기 - split()
문자열에서 구분자를 기준으로 문자열을 나눈다.
문자열.split(구분자)
str5 = "hello everyone"
array1 = str5.split(" ") //["hello" , "everyone"]
array2 = str.split(“”)      // ["H","e","l","l","o"," ", "e","v","e","r","y","o","n","e"]


*문자열을 배열로 변환하기
-문자열의 메서드는 문자(열)을 체크하거나 일정 크기만큼 부분 문자열을 추출하는 것 뿐
-문자열 안의 문자를 수정하는 메서드는 없고, 배열에는 많다
- 문자열을 다룰 때에는 배열로 변환한 후 배열 메서드를 사용하고, 결과 배열을 다시 문자열로
변환한다.

*split() 메서드나 전개 연산자 사용
str5 = "Hello, everyone"
array2 = str5.split("")    // ["H","e","l","l","o"," ", "e","v","e","r","y","o","n","e"]
array3 = [...str5] 


*Array.from() 사용
array4 =Array.from(str5)


*문자열 배열을 문자열로 다시 변환하기 join()메서드
배열.join(구분자)
=> 구분자로 공백없이("") 사용하면 배열 요소를 연결해서 문자열을 만든다.
str6 = array4.join("") // "hello everyone"




--< 새로운 배열 만들기 >

1) 빈 배열 만들고 값 할당하기
let season = []
season[0] = "spring"
season[1] = "summer:
season //["spring","summer"]

2)리터럴 표기법으로 만들기
let pets =["dog", "cat", "parrot"]
pets //["dog", "cat", "parrot"]

3)Array 객체의 인스턴스 만들기
let fruits = new Array("사과", "복숭아", "포도")
fruits //["사과", "복숭아", "포도"]



*배열 값 수정하기 및 추가하기
배열은 인덱스를 사용해서 원하는 위치의 값을 변경할 수 있다.
이미 값이 있는 위치에 값을 할당하면 기존 값은 지워진다.

let pets = ["dog", "cat", "parrot"]
pets[1] = "hamster"
pets    //  ["dog", "hamster", "parrot"] 

-중간에 인덱스를 건너뛰고 값을 할당할 수 있다.

let fruits = new Array('사과', '복숭아', '포도')
fruits[4] = "배"
fruits       // ["사과", "복숭아", "포도", 비어 있음, "배"]
fruits[3]    // undefined


*배열 요소 순회하기
- 배열은 여러 개의 값을 가지고 있기 때문에 반복문 사용 가능하다.

1) for문
let colors = ["red", "green", "white", "black"]
for(let i=0; i<colors.length; i++) {
console.log(colors[i]);
}


2) 인수가 1개인 forEach()문 (forEach는 배열의 순회를 위해 만들어진 구문)
배열.forEach(값)

let animals = ["lion", "bear", "bird"]
animals.forEach(animal => {
  console.log(animal)
});

예) animals 배열에 있는 각 요소의 값을 표시하려면
 배열의 각 요소를 나타내는 animal 변수를 넘겨준다. (보통 배열 이름은 복수, 요소 이름은 단수로 사용) 

3) 인수가 2개인  forEach()문
요소의 값 뿐만 아니라 인덱스도 필요할 경우 사용


animals.forEach((animal, index) => {
   console.log(`animals[${index}] : ${animal}`); 
});



* 기존 배열 합치기
- 기존 배열에 또 다른 배열이나 값을 합쳐서 새로운 배열을 만들 수 있다.
1) concat()
배열.concat(배열 또는 값, 배열 또는 값, ...)

let vegitable = ["양상추" , "토마토", "피클]
let meat = ["불고기"]

let meatBurger = vegitable.concat(meat, "빵")
meatBurger //["양상추" , "토마토", "피클","불고기","빵]

let meatBurger2 = meat.concat("빵", vegitable)
meatBurger2     // ["불고기", "빵", "양상추", "토마토", "피클"]

2)전개 연산자
let vegitable = ["양상추", "토마토", "피클"]
let cheese = ["모짜렐라", "슈레드"]
 
let cheeseBurger = ["빵", ...vegitable, ...cheese]
cheeseBurger   // ["빵", "양상추", "토마토", "피클", "모짜렐라", "슈레드"]


*역순으로 배치하기 - reverse()
-배열 요소의 순서를 거꾸로 바꾸는 메서드, 값의 크기와 상관이 없다
배열.reverse()

let numbers = [6,9,3,21,15]
numbers.reverse() // [15,21,3,9,6]

*크기에 따라 정렬하기 - sort()
sort() 메서드를 사용해서 숫자를 비교해야 한다면 sort() 안에 따로 함수를 정의해야 합니다

let values = [5, 20, 3, 11, 4, 15]
values.sort(function (a, b) {
  if (a > b) return 1;
  if (a < b) return -1;
  if (a === 0) return 0;});

let values = [5, 20, 3, 11, 4, 15]
values.sort(function (a, b) {
  return a - b;  
}) ; 


*배열 끝에 값 ,추가 삭제 하기
- push() : 배열 맨 끝 부분에 값 추가
- pop() : 배열 맨 끝 값 제거
- unshift() : 배열 맨 앞에 값 추가
- shift() : 배열 맨 앞에 값 제거


shift() 메서드와 unshift() 메서드는 배열에서 맨 앞의 요소를 변경하기 때문에
 요소를 추가하거나 제거하는 작업 외에도 인덱스를 변경해야 한다.
배열의 요소가 많거나 요소의 내용이 복잡할수록 shift(), unshift() 메서드의
 실행 시간이 좀 더 길어진다.



*원하는 위치에 값, 추가 삭제하기
1) splice() 함수 : 
배열.splice(위치) // 위치부터 끝까지 요소 삭제

let subjects = ["html", "css", "javascript", "react", "typescript"]
subjects.splice(2)       // ["javascript", "react", "typescript"]
subjects       // ["html", "css"]. 원래 배열이 변경됨


2)배열.splice(위치, 숫자)        // '위치'에서 '숫자' 개수만큼 요소 삭제

let week = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]
let weekday = week.splice(1, 5)
weekday         //  ["mon", "tue", "wed", "thu", "fri"]
week            //  ["sun", "sat"]

3)배열.splice(위치, 숫자, 값)    // '위치'에서 '숫자' 개수만큼 요소를 삭제한 후 '값' 추가
let brunch = ["egg", "milk", "apple", "banana"]
brunch.splice(2, 0, "coffee", "bread")        // [ ]. 삭제 개수 0
brunch       // ["egg", "milk", "coffee", "bread", "apple", "banana"]


4)slice() 함수
배열.slice(위치)              // '위치'부터 끝까지 요소를 추출한다.

let colors= ["red", "green", "blue", "white", "black"]
let colors2 = colors.slice(2)       
colors2             // ["blue", "white", "black"]
colors              // ["red", "green", "blue", "white", "black"]


배열.slice(위치 1, 위치 2)    // 위치 1부터 위치 2 직전까지 추출한다.
let colors3 = colors.slice(1, 4)      // 위치 1부터 위치 3까지 추출 
colors3              // ["green", "blue", "white"]
colors               // ["red", "green", "blue", "white", "black"]

