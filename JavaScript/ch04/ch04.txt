ch04 . 함수와 스코프

--<함수>

*함수를 사용하는 이유
프로그래밍에서 가장 중요한 것은 문제를 분석하는 것
주어진 문제를 여러 개의 작은 문제로 나눈 후 
작은 문제를 하나씩 해결하면서 최종적으로 주어진 문제를 끝낸다.
가장 작은 단위로 나눈 것을 함수로 작성한다.


*함수 선언 & 실행
- 함수를 선언할 때에는 function 이라는 예약어 사용
- 함수 이름을 적은 후 중괄호 안에 실행할 여러 명령들을 묶는다
- 함수를 실행(호출)할 때에는 함수 이름 뒤에 중괄호()를 붙인다.

함수선언 : function calcSum() {
  let sum = 0;
  for(let i = 1; i <= 10; i++) {
    sum += i;
  }
  console.log(`1부터 10까지 더하면 ${sum}입니다.`);
}

함수실행 : calcSum();


*매개변수와 인수
앞에 만들었던 calcSum함수는 몇번을 실행해도 1부터 10까지 더한값만 보여준다
-> 함수를 선언할때, 함수를 실행할 때 변수 사용
*매개변수
함수 선언할 때 외부에서 값을 받는 변수
함수 이름 옆의 괄호 안에 매개변수 이름 넣어주기
매개변수에 이름을 붙이는 방법은 일반적인 변수 이름을 붙이는 방법과 같다
매개변수는 선언된 함수에서만 사용한다
함수에 여러개의 매개변수가 필요할 때에는 매개변수 사이에 쉼표를 찍으며 나열한다.

*인수
매개변수가 있는 함수를 실행할 때, 매개변수로 값을 넘겨주는 변수.



function addNum(num1,num2){  // 매개변수 num1, num2
let sum= num1+num2
aler("결과값 : " + sum)
}
addNum(1,5); //매개변수 num1, num2로 넘겨주는 인수



*return 문
-함수 안에서 실행하고 그 결과를 함수 밖에서 받아 처리해야할 경우
- 함수를 실행한 시점으로 념겨주는 것을  결과값을 반환한다(return)라고 한다
- 함수를 실행한 후 결과를 반환할 때는 예약어 return 다음에 넘겨줄 값이나 변수를 지정한다.
function calcSum(n) {  // n: 매개변수
  let sum = 0;
  for(let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}
 
let num = parseInt(prompt("몇까지 더할까요?"));
 document.write(`1부터 ${num}까지 더하면 ${calcSum(num)}입니다.`); 



*기본 매개변수
기본 매개변수가 있어서 함수를 정의할 때 매개변수의 기본값을 지정할 수 있다.
-> 함수를 실행할 때 인수가 부족하면 기본값 사용

function multiple(a, b = 5, c = 10 ) {
  return a * b + c;
}
multiple(5, 10, 20) 
multiple(10, 20) 
multiple(10);         



--<변수의 유효범위, 스코프>
스코프(scope) : 선언한 변수의 적용 범위
- var 변수 : 함수레벨 스코프
- let, const 변수 : 블록 레벨 스코프


*var 변수 - 함수스코프
- var 변수 선언은 함수 스코프를 가진다
- 함수스코프란 변수를 선언한 함수에서만 변수를 사용할 수 있다는 의미
 	-> 이런 변수는 지역 스코프를 가진다(지역변수)
- 프로그램 시작 부분에서 변수를 선언하면 프로그램 전체에서 사용 가능
	-> 전역 스코프를 가진다(전역 변수)

-함수에서 변수를 선언할 때 변수 이름 앞에 var 예약어를 붙이지 않으면 
 자바스크립트는 전역 변수로 인식한다. 

-실수로 var 예약어 없이 변수를 선언한다면??   전역 변수가 되어 엉뚱한 결과가 발생할 수 있다.



*var 변수와 호이스팅
var x =10; 
var sum = x+y; // 변수를 선언하기 전에 사용
var y= 20;
console.log(`x : ${x}, y: ${y}, sum : ${sum}');

--> 자바 스크립트 해석기가 함소 소스를 훑어보면서 변수를 따로 기억해두기 때문에 소스 상에는
나중에 선언하더라도 내부적으로는 먼저 선언한 것처럼 인식
--> 변수 호이스팅은 오류도 발생하지 않으면서 에상 못한 결과를 만든다.


*let, const 변수의 스코프 - 블록 스코프
- 자바스크립트에서 이야기 하는 블록은 {} 로 둘러싸인 영역
- 블록별로 변수의 유효 범위가 결정되는 것
- let, const 를 사용해 만든 변수는 변수가 선언된 블록 안에서만 유효 (블록 변수)


==>  var 변수보다 let, const 변수 사용하자
==> 전역 변수는 최소한으로 사용하자
==> 객체 선언은 const를 사용하자


*함수 표현식
- 함수를 변수에 할당해서 사용하기
let sum = function(a,b){
return a+b;
}
console.log(`함수 실행 결과: ${sum(10,20)}`);

*화살표 함수
() => {함수 내용}
(매개변수) =>{함수 내용}

let hi = () => {return '안녕하세요?';}
hi();
	실행할 명령이 한줄뿐이면 중괄호 생략
let hi = ()=> return '안녕하세요?';
hi();
	한 줄 명령에 return문이 포함돼있다면 return도 생략
let hi = ()=> '안녕하세요?';
hi()


*매개변수가 있는 화살표 함수
let hi = user =>{console.log(`${user}님, 안녕하세요?`)} 



--<콜백 함수>
-