ch02. 변수와 자료형


1) 입력과 출력 방법
**undefined : 오류 아님 / 결과값이 없는 명령 실행했을때 나타남

-alert()함수 : 알림창 표시 (앨럿 창) 
		괄호 안에 메시지 입력 혹은 변수 사용 

- confirm() 함수 : 확인 창 표시 (컨펌 창)
 		[확인] 버튼과 [취소] 버튼이 있어서 사용자가 어떤 버튼을 클릭했는가에 따라 다르게 동작하도록 할 수 있다.

-prompt() 함수 : 프롬프트창 - 사용자가 간단히 값을 입력할 수 있는 창 표시
		프로그램 실행에 필요한 값을 받을 때 자주 사용
		기본 값을 지정하지 않으면 텍스트 필드가 빈 상태로 표시됨
		prompt(내용) 또는 prompt(내용, 기본값)

-console.log() 함수 : 콘솔 창에 괄호 안의 내용을 표시함
		자바스크립트 소스를 작성하면서 중간에 프로그램이 제대로 동작하는지 확인
		하는 용도로도 쓰임
		괄호 안에 텍스트나 변수 사용 가능

-document.write() 함수 : 괄호 안의 내용을 웹 브라우저 화면에 표시함
			연결 연산자(+)사용 가능, 템플릿 리터럴 사용 가능

 
2) 변수
변수 :
- 프로그램에서 사용하기 위해 값을 담아놓는 바구니
- 일반적으로 변수는 프로그램 안에서 값이 달라질 수 있는 데이터를 가리킴.
- 프로그램 안에서 게속 ㄱ밧이 바뀌지 않더라도 변수로 만들어서 사용한다(상수 변수)

변수 규칙:
1. 변수 이름은 숫자 시작 x, 이름 안에 공백 포함 x
2. 영문자의 대소문자 구별
3. 한단어는 소문자, 두 단어 이상일때는 언더바(_) 혹은 중간에 대문자 섞어 사용

<변수 선언>
let 변수명;
const  변수명;

<변수에 값 할당>
변수명 = 값 또는 식;

<변수 선언과 할당 동시에>
let 변수명 = 값 또는 식;

<result 변수 선언, 값 할당하기>
let result;
result = 10;
result = 20;  < - 다른 값 할당 가능

<number 변수 선언, 값 할당하기>
const number;
number=10;  <- 
number=20; <-xxx 상수개념, 다른값 할당 불가


<var / let /const>
선언하지 않고 사용하면?
var : 오류 없음  / 재선언 가능 /  재할당 가능
let : 오류 발생 /재선언 불가 / 재할당 가능
const : 오류 발생 /재선언 불가 / 재할당 불가
------------------------------------------------------------

function add(a, b) {
  return a + b;
}
 
var sum = add(10, 20);
console.log(sum);    // 30
var sum = 100;      
console.log(sum);    //100
// var 변수는 재선언, 재할당 가능

------------------------------------------------------------------

function add(a, b) {
      return a + b;
    }
    let sum = add(10, 20);
    //let sum = 100;
    console.log(sum);
  //let 변수는 재선언 안되고 재할당만 된다

------------------------------------------------------------------

const myNumber = 10;
  myNumber =50;
console.log(myNumber);
//const 변수는 재선언 재할당 둘다 안된다.

------------------------------------------------------------------



3) 자바스크립트의 자료형

*프로그램에서 처리하는 자료의 형태   (예) 3을 숫자로 처리할지, 문자로 처리할지
*자료형, 자료 유형, 데이터 타입 등으로 부름
*자바스크립트 자료형은 크게 ‘원시형’과 ‘객체’로 나눔
*원시형(primitive type) : 하나의 값만 가지고 있는 자료형. 
*객체(object): 원시형 외의 모든 자료

--<자료형 typeof 함수>--
괄호 안에 값이나 변수를 넣으면 어떤 자료형인지 알려준다.
typeof(“안녕하세요?”)

let data = 5
typeof(data)


-number : 숫자형(정수 실수 함께) , ' ' 이나 " " 로 묶으면 문자열로 인식

-string  :작은따옴표(')나 큰따옴표(")로 묶은 데이터

- 특수기호 : \다음에 기호 사용

-논리형(boolean) : true/false
		truthy : true로 인정할 수 있는 값, falsy: false로 인정할 수 있는 값
		flasy 값을 제외한 모든 값은 truthy 하다. 즉 true로 친다.

-undefined : 변수를 선언하기만 하고 값을 할당하지 않았을 때의 변수 초기값
		undefined는 값이면서 동시에 자료형

-null : 유효하지 않은값/ 값이면서 동시에 자료형




*템플릿 리터럴
- 문자열과 변수, 식을 섞어서 하나의 문자열을 만드는 표현방식
- 백팃(` `) 기호 사용 
- 변수나 식이 들어간다면${}로 묶고, 태그나 띄어쓰기, 이스케이프 문자를 그대로 표시

ex -
name = "백두산";
classroom = 205;
console.log(`${name}님, #{classroom}호 강의실로 입장하세요`)
-->변수 부분만 ${ }로 묶어주고 원하는 결과 문자열을 그대로 사용하면 됨



*배열
- 하나의 변수에 여러 값을 할당할 수 있는 형태
- 대괄호[]로 묶고, 그 안에 값을 나열함,  각 값은  쉼표로 구분
- 대괄호 안에 아무 값도 없으면 빈 배열, 이 역시 배열에 해당
배열명 =[값1, 값2, ...]
emptyArr=[] //빈배열
colors = ["red", "blue", "green"] //문자열 배열
arr = [10, "banana', true] // 여러 자료형으로 구성된 배열

++ 배열과 인덱스
season=["봄", "여름", "가을", "겨울"]
인덱스 : 배열에 있는 여러 값을 저장하는 방 번호
인덱스는 0부터 시작
- 두번째 값을 알고싶으면 season[1] 
- 배열에 있는 요소의 갯수를 알고싶으면 season.length
- 배열에 있는 마지막 값을 알고싶으면 season[season.length -1]



*심볼
- 원시 유형의 자료형
- 유일성 보장
- 객체 프로퍼티의 키로 사용
예시 ) 자바스크립트 프로그램에서 오픈 소스를 가져와 사용하거나
	다른 팀원이 만든 객체들을 함께 사용할 경우 키 이름이 중복될 수 있다
	-> 키 이름을 심볼로 지정하면 서로 충돌이 발생하지 않는다.

- 심볼을 만들때는 Symbol() 함수 사용
- 심볼은 한 번 만들면 변경할 수 업고, 같은 값을 가진 심볼을 만들 수도 없다.

let var1 = Symbol()
let var2 = Symbol()

var1 === var2 // false

- 심볼을 키로 사용할 때에는 [키]처럼 대괄호로 묶어서 표현
- 키에 접근할 때도 마침표가 아닌 대괄효 사용

let id = Symbol()
const member = {
name : "kim",
[id] : 12345
}
==> member //{name:"kim", Symbol():12345}
       member[id] //12345


4)자바스크립트의 형변환
- 자바스크립트는 다른 언어와 다르게 프로그램 실행 중에 자료형이 변환된다.
- 변수 선언할 때 자료형 지정 x
- 변수에 값을 저장할때 자료형이 결정됨
- 편리하긴 하지만 변수를 일관성 있게 유지하기 힘들다.
num = 20 // 숫자형
num = "John" //문자열

*자동 형변환
- 연산을 할 때 자료형이 자동으로 변환된다.
- 문자열을 사칙 연산에 사용하면 자동으로 숫자형으로 변환된다.
- 숫자와 문자열을 연결하면 숫자가 문자열로 변환된다.

*프롬프트 창에서 값을 입력 받으면 그 값은 문자열이된다.
let userInput = prompt("아무 숫자나 입력하세요.") //100
typeof(userInput) // 'string'

result = userInput*10  //1000
typeof(result) // number
userInput //'10' (문자열)


*숫자형으로 변환하기 - Number(), paresint(), parseFloat()
Number(true) //1
Number("20") //20
Number("hi?") //NaN

let userInput=parseInt(prompt("아무 숫자나 입력하세요."));
-> 괄호 안의 값을 정수로 변환

let bodyHeat = parseFloat(prompt("현재 체온은?"));
-> 괄호 안의 값을 실수로 변환
	

*문자열로 변환하기 - toString()
- null 데이터형과 undeFined 데이터형을 제외한 데이터형을 문자열 데이터로 변환
원래 값 뒤에 마침표를 붙이고 함수를 작성
숫자를 문자열로 변환할 때에는 basis사용 (숫자 10진수, 2진수인지 같이 지정)

num =10 // 원래 값 숫자형
isEmpty = true // 원래 값 논리형

num.toString() // '10'. 10진수 문자열
num.toString(2) // '1010', 2진수 문장려
isEmpty.toString() // true 


-null 데이터형과 undefined 데이터형을 포함해서 문자열 데이터로 변환할 때
String()함수의 괄호 안에 값을 넣어서 변환
null 이면 'null'로, undefined이면 'undefined'로 변환

isFull =false // 원래 값 논리형
initValue = null //원래 값 null형
String(isFull) = 'false'
String(initValue) = 'null'


*논리형으로 변환하기 - Boolean()
규칙:
숫자형 - true는 0이 아닌값, false는 0
문자열 - true는 빈 문자열이 아닌 모든 문자열, false는 빈 문자열

Boolean(5*4) //true
Boolean("hi?" //true
Boolean(undefined) //false

*실습 화씨온도 -> 섭씨온도 변환기
//섭씨 : c, 화씨 f
let f = parseFloat(prompt("변환할 화씨 온도"));
let c;

c= ((f-32) / 1.8).toFixed(1);
alert(`화씨 ${f}도는 섭씨${c}도 입니다.`);

//실수의 소수점 자리수 고정 -> toFixed()
값.toFixed(1) 처럼 괄호안에 자릿수 지정.